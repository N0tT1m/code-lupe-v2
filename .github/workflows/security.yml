name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Secret scanning with TruffleHog
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Container vulnerability scanning with Trivy
  trivy-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile.crawler, Dockerfile.downloader, Dockerfile.processor, Dockerfile.qwen-5090]
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -f ${{ matrix.dockerfile }} -t test-image:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for human-readable output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

  # Filesystem scanning with Trivy
  trivy-fs-scan:
    name: Filesystem Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # SAST with Semgrep
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep scan --config auto --sarif --output semgrep-results.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'semgrep-results.sarif'

  # Go security scanning with gosec
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

  # Python security scanning with Bandit
  bandit:
    name: Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit
        run: bandit -r src/python/ -f json -o bandit-results.json
        continue-on-error: true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # License compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check Go licenses
        run: go-licenses check ./...
        continue-on-error: true

  # Security summary
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, trivy-scan, trivy-fs-scan, semgrep, gosec, bandit]
    if: always()
    steps:
      - name: Check security status
        run: |
          echo "Security Scan Results:"
          echo "  Secret Scan: ${{ needs.secret-scan.result }}"
          echo "  Trivy Container: ${{ needs.trivy-scan.result }}"
          echo "  Trivy Filesystem: ${{ needs.trivy-fs-scan.result }}"
          echo "  Semgrep: ${{ needs.semgrep.result }}"
          echo "  Gosec: ${{ needs.gosec.result }}"
          echo "  Bandit: ${{ needs.bandit.result }}"
          
          if [ "${{ needs.secret-scan.result }}" == "failure" ]; then
            echo "::error::Secret scanning failed - secrets detected!"
            exit 1
          fi
