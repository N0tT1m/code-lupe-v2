name: Security Enhanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  # ============================================================================
  # SECURITY SCANNING - HIGH PRIORITY
  # ============================================================================

  dependency-scanning:
    name: 🔒 Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Python dependency scanning
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check (Python)
        run: |
          pip install -r requirements.txt 2>/dev/null || echo "No requirements.txt"
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run pip-audit (Python)
        run: |
          pip-audit --desc --format json --output pip-audit-report.json || true
        continue-on-error: true

      # Go dependency scanning
      - name: Run Nancy (Go dependencies)
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -m all | nancy sleuth --output json > nancy-report.json || true
        continue-on-error: true

      - name: Run govulncheck (Go)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck-report.json 2>&1 || true
        continue-on-error: true

      # Upload reports
      - name: Upload dependency scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-reports
          path: |
            safety-report.json
            pip-audit-report.json
            nancy-report.json
            govulncheck-report.json

  sast-scanning:
    name: 🔍 SAST Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Python SAST - Bandit
      - name: Run Bandit (Python SAST)
        run: |
          pip install bandit[toml]
          bandit -r src/python/ -f json -o bandit-report.json || true
          bandit -r src/python/ -f html -o bandit-report.html || true
        continue-on-error: true

      # Python SAST - Semgrep
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/golang
            p/docker
            p/kubernetes
          generateSarif: true
        continue-on-error: true

      # Upload to GitHub Security
      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-report.html
            semgrep.sarif

  secret-scanning:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      # Gitleaks - Secret scanning
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

      # TruffleHog - Alternative secret scanner
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json > trufflehog-report.json
        continue-on-error: true

      # Custom secret scanner (from our codebase)
      - name: Run custom secret scanner
        run: |
          python3 src/python/utils/secret_scanner.py --scan-path . --output secret-scan-results.json || true
        continue-on-error: true

      - name: Upload secret scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-reports
          path: |
            trufflehog-report.json
            secret-scan-results.json

  container-scanning:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.qwen-5090
          push: false
          load: true
          tags: codelupe-trainer:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy - Container vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'codelupe-trainer:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Grype - Additional container scanner
      - name: Run Grype scanner
        uses: anchore/scan-action@v3
        with:
          image: 'codelupe-trainer:security-scan'
          fail-build: false
          severity-cutoff: high
          output-format: sarif
        continue-on-error: true

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload container scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-reports
          path: trivy-results.sarif

  license-compliance:
    name: 📜 License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          python-version: '1.21'

      # Python license check
      - name: Check Python licenses
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=python-licenses.json || true
          pip-licenses --format=markdown --output-file=python-licenses.md || true
        continue-on-error: true

      # Go license check
      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check Go licenses
        run: |
          go-licenses csv ./... > go-licenses.csv 2>&1 || true
          go-licenses report ./... > go-licenses-report.txt 2>&1 || true
        continue-on-error: true

      # Custom license checker (from our codebase)
      - name: Run custom license checker
        run: |
          python3 src/python/utils/license_checker.py --output license-compliance.json || true
        continue-on-error: true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            python-licenses.json
            python-licenses.md
            go-licenses.csv
            go-licenses-report.txt
            license-compliance.json

  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For better analysis

      # SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=codelupe
            -Dsonar.organization=your-org
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.go.coverage.reportPaths=coverage.out
        continue-on-error: true

      # CodeQL analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python,go"

  # ============================================================================
  # TESTING WITH COVERAGE
  # ============================================================================

  test-go:
    name: 🧪 Go Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/DATA-DOG/go-sqlmock@latest

      - name: Run Go tests with race detector
        run: |
          go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out > coverage.txt

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold 60%"
            exit 1
          fi
          echo "✅ Coverage $COVERAGE% meets threshold"

      - name: Upload Go coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: go
          name: go-coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-reports
          path: |
            coverage.out
            coverage.html
            coverage.txt

  test-python:
    name: 🧪 Python Tests with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: coding_db
          POSTGRES_USER: coding_user
          POSTGRES_PASSWORD: coding_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock
          pip install -r requirements.txt || echo "No requirements.txt"

      - name: Run Python tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: coding_db
          POSTGRES_USER: coding_user
          POSTGRES_PASSWORD: coding_pass
        run: |
          pytest tests/python/ -v \
            --cov=src/python \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=70

      - name: Upload Python coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: python
          name: python-${{ matrix.python-version }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.11'
        with:
          name: python-coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # ============================================================================
  # SECURITY REPORT GENERATION
  # ============================================================================

  security-report:
    name: 📋 Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scanning, sast-scanning, secret-scanning, container-scanning, license-compliance]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate consolidated security report
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          from pathlib import Path

          report = {
              "scan_date": datetime.utcnow().isoformat(),
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "findings": {
                  "critical": 0,
                  "high": 0,
                  "medium": 0,
                  "low": 0,
                  "info": 0
              },
              "scans_completed": [],
              "recommendations": []
          }

          artifacts_dir = Path("security-artifacts")

          # Check for scan results
          scan_types = [
              "dependency-scan-reports",
              "sast-reports",
              "secret-scan-reports",
              "container-scan-reports",
              "license-reports"
          ]

          for scan_type in scan_types:
              scan_dir = artifacts_dir / scan_type
              if scan_dir.exists():
                  report["scans_completed"].append(scan_type)
                  print(f"✅ Found {scan_type}")
              else:
                  print(f"⚠️  Missing {scan_type}")

          # Save report
          with open("security-report.json", "w") as f:
              json.dump(report, f, indent=2)

          # Generate markdown report
          markdown = f"""# Security Scan Report

          **Date:** {report['scan_date']}
          **Repository:** {report['repository']}
          **Branch:** {report['branch']}
          **Commit:** {report['commit'][:8]}

          ## Scans Completed

          """

          for scan in report["scans_completed"]:
              markdown += f"- ✅ {scan}\n"

          markdown += "\n## Findings Summary\n\n"
          markdown += f"- 🔴 Critical: {report['findings']['critical']}\n"
          markdown += f"- 🟠 High: {report['findings']['high']}\n"
          markdown += f"- 🟡 Medium: {report['findings']['medium']}\n"
          markdown += f"- 🟢 Low: {report['findings']['low']}\n"
          markdown += f"- ℹ️  Info: {report['findings']['info']}\n"

          with open("security-report.md", "w") as f:
              f.write(markdown)

          print("\n📋 Security report generated")
          EOF

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: security-consolidated-report
          path: |
            security-report.json
            security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # ============================================================================
  # BUILD AND DEPLOY
  # ============================================================================

  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-go, test-python, security-report]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.qwen-5090
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/codelupe-trainer:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/codelupe-trainer:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
